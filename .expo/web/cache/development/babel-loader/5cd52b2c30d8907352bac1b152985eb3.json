{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ScrollableTab = undefined;\nvar _jsxFileName = 'src/basic/Tabs/ScrollableTabBar.js';\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _createReactClass = require('create-react-class');\n\nvar _createReactClass2 = _interopRequireDefault(_createReactClass);\n\nvar _lodash = require('lodash');\n\nvar _nativeBaseShoutemTheme = require('native-base-shoutem-theme');\n\nvar _mapPropsToStyleNames = require(\"../../utils/mapPropsToStyleNames\");\n\nvar _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);\n\nvar _platform = require(\"./../../theme/variables/platform\");\n\nvar _platform2 = _interopRequireDefault(_platform);\n\nvar _TabHeading = require(\"../TabHeading\");\n\nvar _Text = require(\"../Text\");\n\nvar _TabContainer = require(\"../TabContainer\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar Button = require(\"./Button\");\n\nvar ReactNative = require(\"react-native-web/dist/index\");\n\nvar View = ReactNative.View,\n    Animated = ReactNative.Animated,\n    StyleSheet = ReactNative.StyleSheet,\n    ScrollView = ReactNative.ScrollView,\n    Platform = ReactNative.Platform,\n    Dimensions = ReactNative.Dimensions;\nvar WINDOW_WIDTH = Dimensions.get('window').width;\nvar ScrollableTabBar = (0, _createReactClass2.default)({\n  displayName: 'ScrollableTabBar',\n  propTypes: {\n    goToPage: _propTypes2.default.func,\n    activeTab: _propTypes2.default.number,\n    tabs: _propTypes2.default.array,\n    backgroundColor: _propTypes2.default.string,\n    activeTextColor: _propTypes2.default.string,\n    inactiveTextColor: _propTypes2.default.string,\n    scrollOffset: _propTypes2.default.number,\n    style: _propTypes2.default.shape({\n      style: _propTypes2.default.any\n    }),\n    tabStyle: _propTypes2.default.shape({\n      style: _propTypes2.default.any\n    }),\n    tabsContainerStyle: _propTypes2.default.shape({\n      style: _propTypes2.default.any\n    }),\n    renderTab: _propTypes2.default.func,\n    underlineStyle: _propTypes2.default.shape({\n      style: _propTypes2.default.any\n    }),\n    onScroll: _propTypes2.default.func\n  },\n  contextTypes: {\n    theme: _propTypes2.default.object\n  },\n  getDefaultProps: function getDefaultProps() {\n    return {\n      scrollOffset: 52,\n      activeTextColor: 'navy',\n      inactiveTextColor: 'black',\n      backgroundColor: _platform2.default.tabDefaultBg,\n      style: {},\n      tabStyle: {},\n      tabsContainerStyle: {},\n      underlineStyle: {},\n      tabFontSize: _platform2.default.tabFontSize\n    };\n  },\n  getInitialState: function getInitialState() {\n    this._tabsMeasurements = [];\n    return {\n      _leftTabUnderline: new Animated.Value(0),\n      _widthTabUnderline: new Animated.Value(0),\n      _containerWidth: null\n    };\n  },\n  componentDidMount: function componentDidMount() {\n    this.props.scrollValue.addListener(this.updateView);\n  },\n  updateView: function updateView(offset) {\n    var position = Math.floor(offset.value);\n    var pageOffset = offset.value % 1;\n    var tabCount = this.props.tabs.length;\n    var lastTabPosition = tabCount - 1;\n\n    if (tabCount === 0 || offset.value < 0 || offset.value > lastTabPosition) {\n      return;\n    }\n\n    if (this.necessarilyMeasurementsCompleted(position, position === lastTabPosition)) {\n      this.updateTabPanel(position, pageOffset);\n      this.updateTabUnderline(position, pageOffset, tabCount);\n    }\n  },\n  necessarilyMeasurementsCompleted: function necessarilyMeasurementsCompleted(position, isLastTab) {\n    return this._tabsMeasurements[position] && (isLastTab || this._tabsMeasurements[position + 1]) && this._tabContainerMeasurements && this._containerMeasurements;\n  },\n  updateTabPanel: function updateTabPanel(position, pageOffset) {\n    var containerWidth = this._containerMeasurements.width;\n    var tabWidth = this._tabsMeasurements[position].width;\n    var nextTabMeasurements = this._tabsMeasurements[position + 1];\n    var nextTabWidth = nextTabMeasurements && nextTabMeasurements.width || 0;\n    var tabOffset = this._tabsMeasurements[position].left;\n    var absolutePageOffset = pageOffset * tabWidth;\n    var newScrollX = tabOffset + absolutePageOffset;\n    newScrollX -= (containerWidth - (1 - pageOffset) * tabWidth - pageOffset * nextTabWidth) / 2;\n    newScrollX = newScrollX >= 0 ? newScrollX : 0;\n\n    if (Platform.OS === 'android') {\n      this._scrollView.scrollTo({\n        x: newScrollX,\n        y: 0,\n        animated: false\n      });\n    } else {\n      var rightBoundScroll = this._tabContainerMeasurements.width - this._containerMeasurements.width;\n      newScrollX = newScrollX > rightBoundScroll ? rightBoundScroll : newScrollX;\n\n      this._scrollView.scrollTo({\n        x: newScrollX,\n        y: 0,\n        animated: false\n      });\n    }\n  },\n  updateTabUnderline: function updateTabUnderline(position, pageOffset, tabCount) {\n    var lineLeft = this._tabsMeasurements[position].left;\n    var lineRight = this._tabsMeasurements[position].right;\n\n    if (position < tabCount - 1) {\n      var nextTabLeft = this._tabsMeasurements[position + 1].left;\n      var nextTabRight = this._tabsMeasurements[position + 1].right;\n      var newLineLeft = pageOffset * nextTabLeft + (1 - pageOffset) * lineLeft;\n      var newLineRight = pageOffset * nextTabRight + (1 - pageOffset) * lineRight;\n\n      this.state._leftTabUnderline.setValue(newLineLeft);\n\n      this.state._widthTabUnderline.setValue(newLineRight - newLineLeft);\n    } else {\n      this.state._leftTabUnderline.setValue(lineLeft);\n\n      this.state._widthTabUnderline.setValue(lineRight - lineLeft);\n    }\n  },\n  renderTab: function renderTab(name, page, isTabActive, onPressHandler, onLayoutHandler, tabStyle, activeTabStyle, textStyle, activeTextStyle, tabHeaderStyle, tabFontSize) {\n    var headerContent = typeof name !== 'string' ? name.props.children : undefined;\n    var _props = this.props,\n        activeTextColor = _props.activeTextColor,\n        inactiveTextColor = _props.inactiveTextColor;\n    var textColor = isTabActive ? activeTextColor : inactiveTextColor;\n    var fontWeight = isTabActive ? 'bold' : 'normal';\n\n    if (typeof name === 'string') {\n      return _react2.default.createElement(Button, {\n        key: name + '_' + page,\n        onPress: function onPress() {\n          return onPressHandler(page);\n        },\n        onLayout: onLayoutHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        }\n      }, _react2.default.createElement(_TabHeading.TabHeading, {\n        scrollable: true,\n        style: isTabActive ? activeTabStyle : tabStyle,\n        active: isTabActive,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        }\n      }, _react2.default.createElement(_Text.Text, {\n        style: [isTabActive ? activeTextStyle : textStyle, {\n          fontSize: tabFontSize\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        }\n      }, name)));\n    }\n\n    return _react2.default.createElement(Button, {\n      key: name + '_' + page,\n      onPress: function onPress() {\n        return onPressHandler(page);\n      },\n      onLayout: onLayoutHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      }\n    }, _react2.default.createElement(_TabHeading.TabHeading, {\n      scrollable: true,\n      style: tabHeaderStyle,\n      active: isTabActive,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      }\n    }, headerContent));\n  },\n  measureTab: function measureTab(page, event) {\n    var _event$nativeEvent$la = event.nativeEvent.layout,\n        x = _event$nativeEvent$la.x,\n        width = _event$nativeEvent$la.width,\n        height = _event$nativeEvent$la.height;\n    this._tabsMeasurements[page] = {\n      left: x,\n      right: x + width,\n      width: width,\n      height: height\n    };\n    this.updateView({\n      value: this.props.scrollValue._value\n    });\n  },\n  render: function render() {\n    var _this = this;\n\n    var variables = this.context.theme ? this.context.theme['@@shoutem.theme/themeStyle'].variables : _platform2.default;\n    var tabUnderlineStyle = {\n      position: 'absolute',\n      height: 4,\n      backgroundColor: variables.topTabBarActiveBorderColor,\n      bottom: 0\n    };\n    var dynamicTabUnderline = {\n      left: this.state._leftTabUnderline,\n      width: this.state._widthTabUnderline\n    };\n    return _react2.default.createElement(View, {\n      style: [styles.container, {\n        backgroundColor: this.props.backgroundColor\n      }, this.props.style],\n      onLayout: this.onContainerLayout,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      }\n    }, _react2.default.createElement(ScrollView, {\n      automaticallyAdjustContentInsets: false,\n      ref: function ref(scrollView) {\n        _this._scrollView = scrollView;\n      },\n      horizontal: true,\n      showsHorizontalScrollIndicator: false,\n      showsVerticalScrollIndicator: false,\n      directionalLockEnabled: true,\n      onScroll: this.props.onScroll,\n      bounces: false,\n      scrollsToTop: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      }\n    }, _react2.default.createElement(View, {\n      style: [styles.tabs, {\n        width: this.state._containerWidth\n      }, this.props.tabsContainerStyle],\n      ref: 'tabContainer',\n      onLayout: this.onTabContainerLayout,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      }\n    }, this.props.tabs.map(function (name, page) {\n      var isTabActive = _this.props.activeTab === page;\n      var renderTab = _this.props.renderTab || _this.renderTab;\n      return renderTab(name, page, isTabActive, _this.props.goToPage, _this.measureTab.bind(_this, page), _this.props.tabStyle[page], _this.props.activeTabStyle[page], _this.props.textStyle[page], _this.props.activeTextStyle[page], _this.props.tabHeaderStyle[page], _this.props.tabFontSize[page]);\n    }), _react2.default.createElement(Animated.View, {\n      style: [tabUnderlineStyle, dynamicTabUnderline, this.props.underlineStyle],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287\n      }\n    }))));\n  },\n  UNSAFE_componentWillReceiveProps: function UNSAFE_componentWillReceiveProps(nextProps) {\n    if (!(0, _lodash.isEqual)(this.props.tabs, nextProps.tabs) && this.state._containerWidth) {\n      this.setState({\n        _containerWidth: null\n      });\n    }\n  },\n  onTabContainerLayout: function onTabContainerLayout(e) {\n    this._tabContainerMeasurements = e.nativeEvent.layout;\n    var width = this._tabContainerMeasurements.width;\n\n    if (width < WINDOW_WIDTH) {\n      width = WINDOW_WIDTH;\n    }\n\n    this.setState({\n      _containerWidth: width\n    });\n    this.updateView({\n      value: this.props.scrollValue._value\n    });\n  },\n  onContainerLayout: function onContainerLayout(e) {\n    this._containerMeasurements = e.nativeEvent.layout;\n    this.updateView({\n      value: this.props.scrollValue._value\n    });\n  }\n});\nvar StyledTab = (0, _nativeBaseShoutemTheme.connectStyle)('NativeBase.ScrollableTab', {}, _mapPropsToStyleNames2.default)(ScrollableTabBar);\nexports.ScrollableTab = StyledTab;\nvar styles = StyleSheet.create({\n  tab: {\n    height: 49,\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingLeft: 20,\n    paddingRight: 20\n  },\n  container: {\n    height: 50,\n    borderWidth: 1,\n    borderTopWidth: 0,\n    borderLeftWidth: 0,\n    borderRightWidth: 0,\n    borderColor: '#ccc'\n  },\n  tabs: {\n    flexDirection: 'row',\n    justifyContent: 'space-around'\n  }\n});","map":{"version":3,"sources":["../../../../src/basic/Tabs/ScrollableTabBar.js"],"names":["Button","require","View","Animated","StyleSheet","ScrollView","Platform","Dimensions","ReactNative","WINDOW_WIDTH","ScrollableTabBar","propTypes","goToPage","PropTypes","activeTab","tabs","backgroundColor","activeTextColor","inactiveTextColor","scrollOffset","style","tabStyle","tabsContainerStyle","renderTab","underlineStyle","onScroll","contextTypes","theme","getDefaultProps","variable","tabFontSize","getInitialState","_leftTabUnderline","_widthTabUnderline","_containerWidth","componentDidMount","updateView","position","Math","offset","pageOffset","tabCount","lastTabPosition","necessarilyMeasurementsCompleted","isLastTab","updateTabPanel","containerWidth","tabWidth","nextTabMeasurements","nextTabWidth","tabOffset","absolutePageOffset","newScrollX","x","y","animated","rightBoundScroll","updateTabUnderline","lineLeft","lineRight","nextTabLeft","nextTabRight","newLineLeft","newLineRight","headerContent","name","textColor","isTabActive","fontWeight","onPressHandler","fontSize","measureTab","width","height","event","left","right","value","render","variables","tabUnderlineStyle","bottom","dynamicTabUnderline","styles","UNSAFE_componentWillReceiveProps","nextProps","onTabContainerLayout","e","onContainerLayout","StyledTab","mapPropsToStyleNames","ScrollableTab","tab","alignItems","justifyContent","paddingLeft","paddingRight","container","borderWidth","borderTopWidth","borderLeftWidth","borderRightWidth","borderColor","flexDirection"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport createReactClass from 'create-react-class';\nimport { isEqual } from 'lodash';\nimport { connectStyle, StyleProvider } from 'native-base-shoutem-theme';\nimport mapPropsToStyleNames from '../../utils/mapPropsToStyleNames';\nimport variable from './../../theme/variables/platform';\nimport { TabHeading } from '../TabHeading';\nimport { Text } from '../Text';\nimport { TabContainer } from '../TabContainer';\nconst Button = require('./Button');\nconst ReactNative = require('react-native');\nconst {\n  View,\n  Animated,\n  StyleSheet,\n  ScrollView,\n  Platform,\n  Dimensions\n} = ReactNative;\n\nconst WINDOW_WIDTH = Dimensions.get('window').width;\n\nconst ScrollableTabBar = createReactClass({\n  propTypes: {\n    goToPage: PropTypes.func,\n    activeTab: PropTypes.number,\n    tabs: PropTypes.array,\n    backgroundColor: PropTypes.string,\n    activeTextColor: PropTypes.string,\n    inactiveTextColor: PropTypes.string,\n    scrollOffset: PropTypes.number,\n    style: PropTypes.shape({\n      style: PropTypes.any,\n    }),\n    tabStyle: PropTypes.shape({\n      style: PropTypes.any,\n    }),\n    tabsContainerStyle: PropTypes.shape({\n      style: PropTypes.any,\n    }),\n    renderTab: PropTypes.func,\n    underlineStyle: PropTypes.shape({\n      style: PropTypes.any,\n    }),\n    onScroll: PropTypes.func\n  },\n  contextTypes: {\n    theme: PropTypes.object\n  },\n\n  getDefaultProps() {\n    return {\n      scrollOffset: 52,\n      activeTextColor: 'navy',\n      inactiveTextColor: 'black',\n      backgroundColor: variable.tabDefaultBg,\n      style: {},\n      tabStyle: {},\n      tabsContainerStyle: {},\n      underlineStyle: {},\n      tabFontSize: variable.tabFontSize\n    };\n  },\n\n  getInitialState() {\n    this._tabsMeasurements = [];\n    return {\n      _leftTabUnderline: new Animated.Value(0),\n      _widthTabUnderline: new Animated.Value(0),\n      _containerWidth: null\n    };\n  },\n\n  componentDidMount() {\n    this.props.scrollValue.addListener(this.updateView);\n  },\n\n  updateView(offset) {\n    const position = Math.floor(offset.value);\n    const pageOffset = offset.value % 1;\n    const tabCount = this.props.tabs.length;\n    const lastTabPosition = tabCount - 1;\n\n    if (tabCount === 0 || offset.value < 0 || offset.value > lastTabPosition) {\n      return;\n    }\n\n    if (\n      this.necessarilyMeasurementsCompleted(\n        position,\n        position === lastTabPosition\n      )\n    ) {\n      this.updateTabPanel(position, pageOffset);\n      this.updateTabUnderline(position, pageOffset, tabCount);\n    }\n  },\n\n  necessarilyMeasurementsCompleted(position, isLastTab) {\n    return (\n      this._tabsMeasurements[position] &&\n      (isLastTab || this._tabsMeasurements[position + 1]) &&\n      this._tabContainerMeasurements &&\n      this._containerMeasurements\n    );\n  },\n\n  updateTabPanel(position, pageOffset) {\n    const containerWidth = this._containerMeasurements.width;\n    const tabWidth = this._tabsMeasurements[position].width;\n    const nextTabMeasurements = this._tabsMeasurements[position + 1];\n    const nextTabWidth =\n      (nextTabMeasurements && nextTabMeasurements.width) || 0;\n    const tabOffset = this._tabsMeasurements[position].left;\n    const absolutePageOffset = pageOffset * tabWidth;\n    let newScrollX = tabOffset + absolutePageOffset;\n\n    // center tab and smooth tab change (for when tabWidth changes a lot between two tabs)\n    newScrollX -=\n      (containerWidth -\n        (1 - pageOffset) * tabWidth -\n        pageOffset * nextTabWidth) /\n      2;\n    newScrollX = newScrollX >= 0 ? newScrollX : 0;\n\n    if (Platform.OS === 'android') {\n      this._scrollView.scrollTo({ x: newScrollX, y: 0, animated: false });\n    } else {\n      const rightBoundScroll =\n        this._tabContainerMeasurements.width -\n        this._containerMeasurements.width;\n      newScrollX =\n        newScrollX > rightBoundScroll ? rightBoundScroll : newScrollX;\n      this._scrollView.scrollTo({ x: newScrollX, y: 0, animated: false });\n    }\n  },\n\n  updateTabUnderline(position, pageOffset, tabCount) {\n    const lineLeft = this._tabsMeasurements[position].left;\n    const lineRight = this._tabsMeasurements[position].right;\n\n    if (position < tabCount - 1) {\n      const nextTabLeft = this._tabsMeasurements[position + 1].left;\n      const nextTabRight = this._tabsMeasurements[position + 1].right;\n\n      const newLineLeft =\n        pageOffset * nextTabLeft + (1 - pageOffset) * lineLeft;\n      const newLineRight =\n        pageOffset * nextTabRight + (1 - pageOffset) * lineRight;\n\n      this.state._leftTabUnderline.setValue(newLineLeft);\n      this.state._widthTabUnderline.setValue(newLineRight - newLineLeft);\n    } else {\n      this.state._leftTabUnderline.setValue(lineLeft);\n      this.state._widthTabUnderline.setValue(lineRight - lineLeft);\n    }\n  },\n\n  renderTab(\n    name,\n    page,\n    isTabActive,\n    onPressHandler,\n    onLayoutHandler,\n    tabStyle,\n    activeTabStyle,\n    textStyle,\n    activeTextStyle,\n    tabHeaderStyle,\n    tabFontSize\n  ) {\n    const headerContent =\n      typeof name !== 'string' ? name.props.children : undefined;\n    const { activeTextColor, inactiveTextColor } = this.props;\n    const textColor = isTabActive ? activeTextColor : inactiveTextColor;\n    const fontWeight = isTabActive ? 'bold' : 'normal';\n\n    if (typeof name === 'string') {\n      return (\n        <Button\n          key={`${name}_${page}`}\n          onPress={() => onPressHandler(page)}\n          onLayout={onLayoutHandler}\n        >\n          <TabHeading\n            scrollable\n            style={isTabActive ? activeTabStyle : tabStyle}\n            active={isTabActive}\n          >\n            <Text\n              style={[\n                isTabActive ? activeTextStyle : textStyle,\n                { fontSize: tabFontSize }\n              ]}\n            >\n              {name}\n            </Text>\n          </TabHeading>\n        </Button>\n      );\n    }\n    return (\n      <Button\n        key={`${name}_${page}`}\n        onPress={() => onPressHandler(page)}\n        onLayout={onLayoutHandler}\n      >\n        <TabHeading scrollable style={tabHeaderStyle} active={isTabActive}>\n          {headerContent}\n        </TabHeading>\n      </Button>\n    );\n\n  },\n\n  measureTab(page, event) {\n    const { x, width, height } = event.nativeEvent.layout;\n    this._tabsMeasurements[page] = { left: x, right: x + width, width, height };\n    this.updateView({ value: this.props.scrollValue._value });\n  },\n\n  render() {\n    const variables = this.context.theme\n      ? this.context.theme['@@shoutem.theme/themeStyle'].variables\n      : variable;\n    const tabUnderlineStyle = {\n      position: 'absolute',\n      height: 4,\n      backgroundColor: variables.topTabBarActiveBorderColor,\n      bottom: 0\n    };\n\n    const dynamicTabUnderline = {\n      left: this.state._leftTabUnderline,\n      width: this.state._widthTabUnderline\n    };\n\n    return (\n      <View\n        style={[\n          styles.container,\n          { backgroundColor: this.props.backgroundColor },\n          this.props.style\n        ]}\n        onLayout={this.onContainerLayout}\n      >\n        <ScrollView\n          automaticallyAdjustContentInsets={false}\n          ref={scrollView => {\n            this._scrollView = scrollView;\n          }}\n          horizontal\n          showsHorizontalScrollIndicator={false}\n          showsVerticalScrollIndicator={false}\n          directionalLockEnabled\n          onScroll={this.props.onScroll}\n          bounces={false}\n          scrollsToTop={false}\n        >\n          <View\n            style={[\n              styles.tabs,\n              { width: this.state._containerWidth },\n              this.props.tabsContainerStyle\n            ]}\n            ref={'tabContainer'}\n            onLayout={this.onTabContainerLayout}\n          >\n            {this.props.tabs.map((name, page) => {\n              const isTabActive = this.props.activeTab === page;\n              const renderTab = this.props.renderTab || this.renderTab;\n              return renderTab(\n                name,\n                page,\n                isTabActive,\n                this.props.goToPage,\n                this.measureTab.bind(this, page),\n                this.props.tabStyle[page],\n                this.props.activeTabStyle[page],\n                this.props.textStyle[page],\n                this.props.activeTextStyle[page],\n                this.props.tabHeaderStyle[page],\n                this.props.tabFontSize[page]\n              );\n            })}\n            <Animated.View\n              style={[\n                tabUnderlineStyle,\n                dynamicTabUnderline,\n                this.props.underlineStyle\n              ]}\n            />\n          </View>\n        </ScrollView>\n      </View>\n    );\n  },\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    // If the tabs change, force the width of the tabs container to be recalculated\n    if (\n      !isEqual(this.props.tabs, nextProps.tabs) &&\n      this.state._containerWidth\n    ) {\n      this.setState({ _containerWidth: null });\n    }\n  },\n\n  onTabContainerLayout(e) {\n    this._tabContainerMeasurements = e.nativeEvent.layout;\n    let width = this._tabContainerMeasurements.width;\n    if (width < WINDOW_WIDTH) {\n      width = WINDOW_WIDTH;\n    }\n    this.setState({ _containerWidth: width });\n    this.updateView({ value: this.props.scrollValue._value });\n  },\n\n  onContainerLayout(e) {\n    this._containerMeasurements = e.nativeEvent.layout;\n    this.updateView({ value: this.props.scrollValue._value });\n  }\n});\n\n// module.exports = ScrollableTabBar;\nconst StyledTab = connectStyle(\n  'NativeBase.ScrollableTab',\n  {},\n  mapPropsToStyleNames\n)(ScrollableTabBar);\nexport { StyledTab as ScrollableTab };\nconst styles = StyleSheet.create({\n  tab: {\n    height: 49,\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingLeft: 20,\n    paddingRight: 20\n  },\n  container: {\n    height: 50,\n    borderWidth: 1,\n    borderTopWidth: 0,\n    borderLeftWidth: 0,\n    borderRightWidth: 0,\n    borderColor: '#ccc'\n  },\n  tabs: {\n    flexDirection: 'row',\n    justifyContent: 'space-around'\n  }\n});\n"]},"metadata":{},"sourceType":"script"}