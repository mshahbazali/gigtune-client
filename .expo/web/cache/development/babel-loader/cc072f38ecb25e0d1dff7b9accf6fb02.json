{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport hoistStatics from 'hoist-non-react-statics';\nimport * as _ from 'lodash';\nimport normalizeStyle from \"./StyleNormalizer/normalizeStyle\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Theme, { ThemeShape } from \"./Theme\";\nimport { resolveComponentStyle } from \"./resolveComponentStyle\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar themeCache = {};\nexport function clearThemeCache() {\n  themeCache = {};\n}\n\nfunction throwConnectStyleError(errorMessage, componentDisplayName) {\n  throw Error(errorMessage + \" - when connecting \" + componentDisplayName + \" component to style.\");\n}\n\nfunction getTheme(context) {\n  return context.theme || Theme.getDefaultTheme();\n}\n\nfunction isStyleVariant(propertyName) {\n  return /^\\./.test(propertyName);\n}\n\nfunction isChildStyle(propertyName) {\n  return /(^[^\\.].*\\.)|^\\*$/.test(propertyName);\n}\n\nfunction getConcreteStyle(style) {\n  return _.pickBy(style, function (value, key) {\n    return !isStyleVariant(key) && !isChildStyle(key);\n  });\n}\n\nexport default (function (componentStyleName) {\n  var componentStyle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var mapPropsToStyleNames = arguments.length > 2 ? arguments[2] : undefined;\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n  function getComponentDisplayName(WrappedComponent) {\n    return WrappedComponent.displayName || WrappedComponent.name || \"Component\";\n  }\n\n  return function wrapWithStyledComponent(WrappedComponent) {\n    var componentDisplayName = getComponentDisplayName(WrappedComponent);\n\n    if (!_.isPlainObject(componentStyle)) {\n      throwConnectStyleError(\"Component style must be plain object\", componentDisplayName);\n    }\n\n    if (!_.isString(componentStyleName)) {\n      throwConnectStyleError(\"Component Style Name must be string\", componentDisplayName);\n    }\n\n    var StyledComponent = function (_React$Component) {\n      _inherits(StyledComponent, _React$Component);\n\n      var _super = _createSuper(StyledComponent);\n\n      function StyledComponent(props, context) {\n        var _this;\n\n        _classCallCheck(this, StyledComponent);\n\n        _this = _super.call(this, props, context);\n\n        var styleNames = _this.getStyleNames(props);\n\n        var style = props.style;\n\n        var finalStyle = _this.getFinalStyle(props, context, style, styleNames);\n\n        _this.setWrappedInstance = _this.setWrappedInstance.bind(_assertThisInitialized(_this));\n        _this.resolveConnectedComponentStyle = _this.resolveConnectedComponentStyle.bind(_assertThisInitialized(_this));\n        _this.state = {\n          style: finalStyle,\n          addedProps: _this.resolveAddedProps(),\n          styleNames: styleNames\n        };\n        return _this;\n      }\n\n      _createClass(StyledComponent, [{\n        key: \"getFinalStyle\",\n        value: function getFinalStyle(props, context, style, styleNames) {\n          var resolvedStyle = {};\n\n          if (context.parentPath) {\n            resolvedStyle = this.getOrSetStylesInCache(context, props, styleNames, [].concat(_toConsumableArray(context.parentPath), [componentStyleName], _toConsumableArray(styleNames)));\n          } else {\n            resolvedStyle = this.resolveStyle(context, props, styleNames);\n            themeCache[componentStyleName] = resolvedStyle;\n          }\n\n          var concreteStyle = getConcreteStyle(_.merge({}, resolvedStyle));\n\n          if (_.isArray(style)) {\n            return [concreteStyle].concat(_toConsumableArray(style));\n          }\n\n          if (typeof style == \"number\" || typeof style == \"object\") {\n            return [concreteStyle, style];\n          }\n\n          return concreteStyle;\n        }\n      }, {\n        key: \"getStyleNames\",\n        value: function getStyleNames(props) {\n          var styleNamesArr = _.map(props, function (value, key) {\n            if (typeof value !== \"object\" && value === true) {\n              return \".\" + key;\n            } else {\n              return false;\n            }\n          });\n\n          _.remove(styleNamesArr, function (value, index) {\n            return value === false;\n          });\n\n          return styleNamesArr;\n        }\n      }, {\n        key: \"getParentPath\",\n        value: function getParentPath() {\n          if (!this.context.parentPath) {\n            return [componentStyleName];\n          } else {\n            return [].concat(_toConsumableArray(this.context.parentPath), [componentStyleName], _toConsumableArray(this.getStyleNames(this.props)));\n          }\n        }\n      }, {\n        key: \"getChildContext\",\n        value: function getChildContext() {\n          return {\n            parentPath: this.getParentPath()\n          };\n        }\n      }, {\n        key: \"UNSAFE_componentWillReceiveProps\",\n        value: function UNSAFE_componentWillReceiveProps(nextProps, nextContext) {\n          var styleNames = this.getStyleNames(nextProps);\n          var style = nextProps.style;\n\n          if (this.shouldRebuildStyle(nextProps, nextContext, styleNames)) {\n            var finalStyle = this.getFinalStyle(nextProps, nextContext, style, styleNames);\n            this.setState({\n              style: finalStyle,\n              styleNames: styleNames\n            });\n          }\n        }\n      }, {\n        key: \"setNativeProps\",\n        value: function setNativeProps(nativeProps) {\n          if (this.wrappedInstance.setNativeProps) {\n            this.wrappedInstance.setNativeProps(nativeProps);\n          }\n        }\n      }, {\n        key: \"setWrappedInstance\",\n        value: function setWrappedInstance(component) {\n          if (component && component._root) {\n            this._root = component._root;\n          } else {\n            this._root = component;\n          }\n\n          this.wrappedInstance = this._root;\n        }\n      }, {\n        key: \"hasStyleNameChanged\",\n        value: function hasStyleNameChanged(nextProps, styleNames) {\n          return mapPropsToStyleNames && this.props !== nextProps && !_.isEqual(this.state.styleNames, styleNames);\n        }\n      }, {\n        key: \"shouldRebuildStyle\",\n        value: function shouldRebuildStyle(nextProps, nextContext, styleNames) {\n          return nextProps.style !== this.props.style || nextProps.styleName !== this.props.styleName || nextContext.theme !== this.context.theme || !_.isEqual(nextContext.parentPath, this.context.parentPath) || this.hasStyleNameChanged(nextProps, styleNames);\n        }\n      }, {\n        key: \"resolveStyleNames\",\n        value: function resolveStyleNames(props) {\n          var styleName = props.styleName;\n          var styleNames = styleName ? styleName.split(/\\s/g) : [];\n\n          if (!mapPropsToStyleNames) {\n            return styleNames;\n          }\n\n          return _.uniq(mapPropsToStyleNames(styleNames, props));\n        }\n      }, {\n        key: \"resolveAddedProps\",\n        value: function resolveAddedProps() {\n          var addedProps = {};\n\n          if (options.withRef) {\n            addedProps.ref = \"wrappedInstance\";\n          }\n\n          return addedProps;\n        }\n      }, {\n        key: \"getOrSetStylesInCache\",\n        value: function getOrSetStylesInCache(context, props, styleNames, path) {\n          if (themeCache && themeCache[path.join(\">\")]) {\n            return themeCache[path.join(\">\")];\n          } else {\n            var resolvedStyle = this.resolveStyle(context, props, styleNames);\n\n            if (Object.keys(themeCache).length < 10000) {\n              themeCache[path.join(\">\")] = resolvedStyle;\n            }\n\n            return resolvedStyle;\n          }\n        }\n      }, {\n        key: \"resolveStyle\",\n        value: function resolveStyle(context, props, styleNames) {\n          var parentStyle = {};\n          var theme = getTheme(context);\n          var themeStyle = theme.createComponentStyle(componentStyleName, componentStyle);\n\n          if (context.parentPath) {\n            parentStyle = themeCache[context.parentPath.join(\">\")];\n          } else {\n            parentStyle = resolveComponentStyle(componentStyleName, styleNames, themeStyle, parentStyle);\n          }\n\n          return resolveComponentStyle(componentStyleName, styleNames, themeStyle, parentStyle);\n        }\n      }, {\n        key: \"resolveConnectedComponentStyle\",\n        value: function resolveConnectedComponentStyle(props) {\n          var styleNames = this.resolveStyleNames(props);\n          return this.resolveStyle(this.context, props, styleNames).componentStyle;\n        }\n      }, {\n        key: \"render\",\n        value: function render() {\n          var _this$state = this.state,\n              addedProps = _this$state.addedProps,\n              style = _this$state.style;\n          return _jsx(WrappedComponent, _objectSpread(_objectSpread(_objectSpread({}, this.props), addedProps), {}, {\n            style: style,\n            ref: this.setWrappedInstance\n          }));\n        }\n      }]);\n\n      return StyledComponent;\n    }(React.Component);\n\n    StyledComponent.contextTypes = {\n      theme: ThemeShape,\n      parentPath: PropTypes.array\n    };\n    StyledComponent.childContextTypes = {\n      parentPath: PropTypes.array\n    };\n    StyledComponent.propTypes = {\n      style: PropTypes.oneOfType([PropTypes.object, PropTypes.number, PropTypes.array]),\n      styleName: PropTypes.string,\n      virtual: PropTypes.bool\n    };\n    StyledComponent.defaultProps = {\n      virtual: options.virtual\n    };\n    StyledComponent.displayName = \"Styled(\" + componentDisplayName + \")\";\n    StyledComponent.WrappedComponent = WrappedComponent;\n    return hoistStatics(StyledComponent, WrappedComponent);\n  };\n});","map":{"version":3,"names":["React","PropTypes","hoistStatics","_","normalizeStyle","Theme","ThemeShape","resolveComponentStyle","themeCache","clearThemeCache","throwConnectStyleError","errorMessage","componentDisplayName","Error","getTheme","context","theme","getDefaultTheme","isStyleVariant","propertyName","test","isChildStyle","getConcreteStyle","style","pickBy","value","key","componentStyleName","componentStyle","mapPropsToStyleNames","options","getComponentDisplayName","WrappedComponent","displayName","name","wrapWithStyledComponent","isPlainObject","isString","StyledComponent","props","styleNames","getStyleNames","finalStyle","getFinalStyle","setWrappedInstance","bind","resolveConnectedComponentStyle","state","addedProps","resolveAddedProps","resolvedStyle","parentPath","getOrSetStylesInCache","resolveStyle","concreteStyle","merge","isArray","styleNamesArr","map","remove","index","getParentPath","nextProps","nextContext","shouldRebuildStyle","setState","nativeProps","wrappedInstance","setNativeProps","component","_root","isEqual","styleName","hasStyleNameChanged","split","uniq","withRef","ref","path","join","Object","keys","length","parentStyle","themeStyle","createComponentStyle","resolveStyleNames","Component","contextTypes","array","childContextTypes","propTypes","oneOfType","object","number","string","virtual","bool","defaultProps"],"sources":["E:/Github/gigtune/node_modules/native-base-shoutem-theme/src/connectStyle.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport hoistStatics from 'hoist-non-react-statics';\nimport * as _ from 'lodash';\nimport normalizeStyle from './StyleNormalizer/normalizeStyle';\nimport { StyleSheet } from \"react-native\";\n\nimport Theme, { ThemeShape } from \"./Theme\";\nimport { resolveComponentStyle } from \"./resolveComponentStyle\";\n\nlet themeCache = {};\n\n/**\n * clear theme cache\n * @export\n */\nexport function clearThemeCache() {\n  themeCache = {};\n}\n\n/**\n * Formats and throws an error when connecting component style with the theme.\n *\n * @param errorMessage The error message.\n * @param componentDisplayName The name of the component that is being connected.\n */\nfunction throwConnectStyleError(errorMessage, componentDisplayName) {\n  throw Error(\n    `${errorMessage} - when connecting ${componentDisplayName} component to style.`\n  );\n}\n\n/**\n * Returns the theme object from the provided context,\n * or an empty theme if the context doesn't contain a theme.\n *\n * @param context The React component context.\n * @returns {Theme} The Theme object.\n */\nfunction getTheme(context) {\n  // Fallback to a default theme if the component isn't\n  // rendered in a StyleProvider.\n  return context.theme || Theme.getDefaultTheme();\n}\n\n/**\n * Matches any style properties that represent component style variants.\n * Those styles can be applied to the component by using the styleName\n * prop. All style variant property names must start with a single '.'\n * character, e.g., '.variant'.\n *\n * @param propertyName The style property name.\n * @returns {boolean} True if the style property represents a component variant, false otherwise.\n */\nfunction isStyleVariant(propertyName) {\n  return /^\\./.test(propertyName);\n}\n\n/**\n * Matches any style properties that represent style rules that target the\n * component children. Those styles can have two formats, they can either\n * target the components by component name ('shoutem.ui.Text'), or by component\n * name and variant ('shoutem.ui.Text.line-through'). Beside specifying the\n * component name, those styles can also target any component by using the\n * '*' wildcard ('*', or '*.line-through'). The rule to identify those styles is\n * that they have to contain a '.' character in their name or be a '*'.\n *\n * @param propertyName The style property name.\n * @returns {boolean} True if the style property represents a child style, false otherwise.\n */\nfunction isChildStyle(propertyName) {\n  return /(^[^\\.].*\\.)|^\\*$/.test(propertyName);\n}\n\nfunction getConcreteStyle(style) {\n  return _.pickBy(style, (value, key) => {\n    return !isStyleVariant(key) && !isChildStyle(key);\n  });\n}\n\n/**\n * Resolves the final component style by using the theme style, if available and\n * merging it with the style provided directly through the style prop, and style\n * variants applied through the styleName prop.\n *\n * @param componentStyleName The component name that will be used\n * to target this component in style rules.\n * @param componentStyle The default component style.\n * @param mapPropsToStyleNames Pure function to customize styleNames depending on props.\n * @param options The additional connectStyle options\n * @param options.virtual The default value of the virtual prop\n * @param options.withRef Create component ref with addedProps; if true, ref name is wrappedInstance\n * @returns {StyledComponent} The new component that will handle\n * the styling of the wrapped component.\n */\nexport default (\n  componentStyleName,\n  componentStyle = {},\n  mapPropsToStyleNames,\n  options = {}\n) => {\n  function getComponentDisplayName(WrappedComponent) {\n    return WrappedComponent.displayName || WrappedComponent.name || \"Component\";\n  }\n\n  return function wrapWithStyledComponent(WrappedComponent) {\n    const componentDisplayName = getComponentDisplayName(WrappedComponent);\n\n    if (!_.isPlainObject(componentStyle)) {\n      throwConnectStyleError(\n        \"Component style must be plain object\",\n        componentDisplayName\n      );\n    }\n\n    if (!_.isString(componentStyleName)) {\n      throwConnectStyleError(\n        \"Component Style Name must be string\",\n        componentDisplayName\n      );\n    }\n\n    class StyledComponent extends React.Component {\n      static contextTypes = {\n        theme: ThemeShape,\n        // The style inherited from the parent\n        // parentStyle: PropTypes.object,\n        parentPath: PropTypes.array\n      };\n\n      static childContextTypes = {\n        // Provide the parent style to child components\n        // parentStyle: PropTypes.object,\n        // resolveStyle: PropTypes.func,\n        parentPath: PropTypes.array\n      };\n\n      static propTypes = {\n        // Element style that overrides any other style of the component\n        style: PropTypes.oneOfType([\n          PropTypes.object,\n          PropTypes.number,\n          PropTypes.array\n        ]),\n        // The style variant names to apply to this component,\n        // multiple variants may be separated with a space character\n        styleName: PropTypes.string,\n        // Virtual elements will propagate the parent\n        // style to their children, i.e., the children\n        // will behave as they are placed directly below\n        // the parent of a virtual element.\n        virtual: PropTypes.bool\n      };\n\n      static defaultProps = {\n        virtual: options.virtual\n      };\n\n      static displayName = `Styled(${componentDisplayName})`;\n      static WrappedComponent = WrappedComponent;\n\n      constructor(props, context) {\n        super(props, context);\n        // console.log(context.parentPath);\n        const styleNames = this.getStyleNames(props);\n        const style = props.style;\n\n        const finalStyle = this.getFinalStyle(\n          props,\n          context,\n          style,\n          styleNames\n        );\n\n        this.setWrappedInstance = this.setWrappedInstance.bind(this);\n        this.resolveConnectedComponentStyle = this.resolveConnectedComponentStyle.bind(\n          this\n        );\n        this.state = {\n          style: finalStyle,\n          // AddedProps are additional WrappedComponent props\n          // Usually they are set trough alternative ways,\n          // such as theme style, or trough options\n          addedProps: this.resolveAddedProps(),\n          styleNames\n        };\n      }\n\n      getFinalStyle(props, context, style, styleNames) {\n        let resolvedStyle = {};\n        if (context.parentPath) {\n          resolvedStyle = this.getOrSetStylesInCache(\n            context,\n            props,\n            styleNames,\n            [...context.parentPath, componentStyleName, ...styleNames]\n          );\n        } else {\n          resolvedStyle = this.resolveStyle(context, props, styleNames);\n          themeCache[componentStyleName] = resolvedStyle;\n        }\n\n        const concreteStyle = getConcreteStyle(_.merge({}, resolvedStyle));\n\n        if (_.isArray(style)) {\n          return [concreteStyle, ...style];\n        }\n\n        if (typeof style == \"number\" || typeof style == \"object\") {\n          return [concreteStyle, style];\n        }\n\n        return concreteStyle;\n      }\n\n      getStyleNames(props) {\n        const styleNamesArr = _.map(props, (value, key) => {\n          if (typeof value !== \"object\" && value === true) {\n            return \".\" + key;\n          } else {\n            return false;\n          }\n        });\n        _.remove(styleNamesArr, (value, index) => {\n          return value === false;\n        });\n\n        return styleNamesArr;\n      }\n\n      getParentPath() {\n        if (!this.context.parentPath) {\n          return [componentStyleName];\n        } else {\n          return [\n            ...this.context.parentPath,\n            componentStyleName,\n            ...this.getStyleNames(this.props)\n          ];\n        }\n      }\n\n      getChildContext() {\n        return {\n          // parentStyle: this.props.virtual ?\n          //   this.context.parentStyle :\n          //   this.state.childrenStyle,\n          // resolveStyle: this.resolveConnectedComponentStyle,\n          parentPath: this.getParentPath()\n        };\n      }\n\n      UNSAFE_componentWillReceiveProps(nextProps, nextContext) {\n        const styleNames = this.getStyleNames(nextProps);\n        const style = nextProps.style;\n        if (this.shouldRebuildStyle(nextProps, nextContext, styleNames)) {\n          const finalStyle = this.getFinalStyle(\n            nextProps,\n            nextContext,\n            style,\n            styleNames\n          );\n\n          this.setState({\n            style: finalStyle,\n            // childrenStyle: resolvedStyle.childrenStyle,\n            styleNames\n          });\n        }\n      }\n\n      setNativeProps(nativeProps) {\n        if (this.wrappedInstance.setNativeProps) {\n          this.wrappedInstance.setNativeProps(nativeProps);\n        }\n      }\n\n      setWrappedInstance(component) {\n        if (component && component._root) {\n          this._root = component._root;\n        } else {\n          this._root = component;\n        }\n        this.wrappedInstance = this._root;\n      }\n\n      hasStyleNameChanged(nextProps, styleNames) {\n        return (\n          mapPropsToStyleNames &&\n          this.props !== nextProps &&\n          // Even though props did change here,\n          // it doesn't necessary means changed props are those which affect styleName\n          !_.isEqual(this.state.styleNames, styleNames)\n        );\n      }\n\n      shouldRebuildStyle(nextProps, nextContext, styleNames) {\n        return (\n          nextProps.style !== this.props.style ||\n          nextProps.styleName !== this.props.styleName ||\n          nextContext.theme !== this.context.theme ||\n          !_.isEqual(nextContext.parentPath, this.context.parentPath) ||\n          this.hasStyleNameChanged(nextProps, styleNames)\n        );\n      }\n\n      resolveStyleNames(props) {\n        const { styleName } = props;\n        const styleNames = styleName ? styleName.split(/\\s/g) : [];\n\n        if (!mapPropsToStyleNames) {\n          return styleNames;\n        }\n\n        // We only want to keep the unique style names\n        return _.uniq(mapPropsToStyleNames(styleNames, props));\n      }\n\n      resolveAddedProps() {\n        const addedProps = {};\n        if (options.withRef) {\n          addedProps.ref = \"wrappedInstance\";\n        }\n        return addedProps;\n      }\n\n      getOrSetStylesInCache(context, props, styleNames, path) {\n        if (themeCache && themeCache[path.join(\">\")]) {\n          // console.log('**************');\n\n          return themeCache[path.join(\">\")];\n        } else {\n          const resolvedStyle = this.resolveStyle(context, props, styleNames);\n          if (Object.keys(themeCache).length < 10000) {\n            themeCache[path.join(\">\")] = resolvedStyle;\n          }\n          return resolvedStyle;\n        }\n      }\n\n      resolveStyle(context, props, styleNames) {\n        let parentStyle = {};\n\n        const theme = getTheme(context);\n        const themeStyle = theme.createComponentStyle(\n          componentStyleName,\n          componentStyle\n        );\n\n        if (context.parentPath) {\n          parentStyle = themeCache[context.parentPath.join(\">\")];\n        } else {\n          parentStyle = resolveComponentStyle(\n            componentStyleName,\n            styleNames,\n            themeStyle,\n            parentStyle\n          );\n        }\n\n        return resolveComponentStyle(\n          componentStyleName,\n          styleNames,\n          themeStyle,\n          parentStyle\n        );\n      }\n\n      /**\n       * A helper function provided to child components that enables\n       * them to resolve their style for any set of prop values.\n       *\n       * @param props The component props to use to resolve the style values.\n       * @returns {*} The resolved component style.\n       */\n      resolveConnectedComponentStyle(props) {\n        const styleNames = this.resolveStyleNames(props);\n        return this.resolveStyle(this.context, props, styleNames)\n          .componentStyle;\n      }\n\n      render() {\n        // console.log('themeCache', themeCache);\n\n        // if(componentStyleName == 'NativeBase.Text') {\n        //   console.log(this.state.style);\n        //   console.log(themeCache);\n        // }\n\n        const { addedProps, style } = this.state;\n        return (\n          <WrappedComponent\n            {...this.props}\n            {...addedProps}\n            style={style}\n            ref={this.setWrappedInstance}\n          />\n        );\n      }\n    }\n\n    return hoistStatics(StyledComponent, WrappedComponent);\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}